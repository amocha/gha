stages:
  - stage: Run_Onboarding
    jobs:
      - job: Onboard
        steps:
          - task: DownloadSecureFile@1
            name: certpfx
            inputs:
              secureFile: $(platformSpnPfx)
          - task: AzureCLI@2
            displayName: Create TF Storage Account
            inputs:
              azureSubscription: $(azureServiceConnection)
              failOnStandardError: false
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az account set -s ${{ parameters.appSubscriptionId }}
                resgrp="$(projectShortCode)-$(uworkStream)-${{ parameters.placement }}-$(environ)-${{ parameters.releaseVersion}}-TF-RG"
                az group create -l northeurope --name $resgrp
                tfstacc="$(lprojectShortCode)$(workStream)sg2$(lenviron)000001"
                if (! az storage account show -n $tfstacc -g $resgrp -o json --query 'name'  2>/dev/null); then
                  tfstacc="$(lprojectShortCode)$(workStream)sg2$(lenviron)${{ parameters.instance }}001"
                fi
                az storage account create -g $resgrp --name $tfstacc --kind StorageV2 -l northeurope --sku Standard_GRS --https-only true --public-network-access Enabled --allow-blob-public-access true
                az storage container create --name application --account-name $tfstacc --auth-mode "login"
                echo "##vso[task.setvariable variable=RG]$resgrp"
                echo "##vso[task.setvariable variable=STA]$tfstacc"
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            inputs:
              terraformVersion: "1.2.7"
            displayName: Install terraform
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "ssh.dev.azure.com"
              sshKeySecureFile: "f4dp"
          - task: qetza.replacetokens.replacetokens-task.replacetokens@3
            displayName: Replace tokens in TF backend config
            inputs:
              targetFiles: "*.conf"
              encoding: "auto"
              writeBOM: true
              actionOnMissing: "warn"
              keepToken: false
              tokenPrefix: "#{"
              tokenSuffix: "}#"
              useLegacyPattern: false
              enableTelemetry: true
          - task: AzureCLI@2
            displayName: Get KV Secrets
            inputs:
              azureSubscription: $(azureServiceConnection)
              failOnStandardError: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                subName=$(az account show -n ${{ parameters.appSubscriptionId }} --query name -o tsv)
                subPrefix=$(echo $subName | awk -F - '{print $1"-"$2"-SPN-"$4"-"$5"-"$6}')
                appCliSecret="${subPrefix}-Contributor-secret"
                appCliCert="${subPrefix}-Contributor-cert"
                adoIp=$(curl -s https://ifconfig.me/ip)
                az keyvault network-rule add --name $(platformKeyVault) --ip-address $adoIp
                az keyvault secret show --vault-name $(platformKeyVault) --name $appCliCert  -o json | jq -r '.value'| base64 -d > /tmp/appcert.pfx
                az keyvault secret show --vault-name $(platformKeyVault) --name def-access-pol -o json |jq -r '.value'| base64 -d > /tmp/accesspol
                appClId=$(az keyvault secret show --vault-name $(platformKeyVault) --name $appCliSecret -o json| jq -r '.value')
                echo "##vso[task.setvariable variable=appClientId]$appClId"

                if (! az keyvault secret show  --vault-name $(platformKeyVault) --name $(lprojectShortCode)$(workStream)$(lenviron)f4dptkn 2> /dev/null); then
                  token=$(</dev/urandom tr -dc 'A-Za-z0-9' | head -c 45  ; echo)
                  az keyvault secret set -n $(lprojectShortCode)$(workStream)$(lenviron)f4dptkn --vault-name $(platformKeyVault) --value $token  --expires $(date -d "+1 year" +%Y-%m-%d) > /dev/null
                fi
                tkn=$(az keyvault secret show  --vault-name $(platformKeyVault) --name $(lprojectShortCode)$(workStream)$(lenviron)f4dptkn  -o json| jq -r '.value')
                echo "##vso[task.setvariable variable=TKN]$tkn"

                az keyvault network-rule remove --name $(platformKeyVault) --ip-address $adoIp
          - task: AzureCLI@2
            displayName: Terraform init and plan
            inputs:
              azureSubscription: $(azureServiceConnection)
              failOnStandardError: true
              addSpnToEnvironment: true
              useGlobalConfig: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                export ARM_CLIENT_ID=$servicePrincipalId
                export ARM_CLIENT_CERTIFICATE_PATH=$(certpfx.secureFilePath)
                export ARM_SUBSCRIPTION_ID=${{ parameters.appSubscriptionId }}
                export ARM_TENANT_ID=$tenantId

                echo ${{ parameters.tfvar }} | base64 -d > /tmp/tfvars
                terraform init -backend-config=env.conf
                terraform plan -var owner="${{ parameters.owner }}" \
                                -var cert_pfx="/tmp/appcert.pfx" \
                                -var appsptype=${{ parameters.appsptype }}  \
                                -var appClientId=$(appClientId) \
                                -var vnet_prim=${{ parameters.vnet_prim }} \
                                -var vnet_sec=${{ parameters.vnet_sec}}   \
                                -var isProd=$(isProd) \
                                -var environment=${{ parameters.environ }} \
                                -var workStream=$(uworkStream) \
                                -var projectStream=$(projectShortCode) \
                                -var releaseVersion=${{ parameters.releaseVersion }} \
                                -var region=${{ parameters.region }} \
                                -var placement=${{ parameters.placement }} \
                                -var token=$(TKN) \
                                -var-file /tmp/tfvars \
                                -var-file /tmp/accesspol \
                                -out myplan
          - task: AzureCLI@2
            displayName: Terraform apply
            condition: eq('${{ parameters.runDeploy }}', true)
            inputs:
              azureSubscription: $(azureServiceConnection)
              failOnStandardError: true
              addSpnToEnvironment: true
              useGlobalConfig: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                export ARM_CLIENT_ID=$servicePrincipalId
                export ARM_CLIENT_CERTIFICATE_PATH=$(certpfx.secureFilePath)
                export ARM_SUBSCRIPTION_ID=${{ parameters.appSubscriptionId }}
                export ARM_TENANT_ID=$tenantId
                terraform apply myplan
          - task: DownloadSecureFile@1
            displayName: Download kubeconfig bastion
            name: kubeconfig_bastion
            condition: eq('${{ parameters.runDeploy }}', true)
            inputs:
              secureFile: $(kubeconfigBastion)
          - task: DownloadSecureFile@1
            displayName: Downlaod kubeconfig control
            name: kubeconfig_cc
            condition: eq('${{ parameters.runDeploy }}', true)
            inputs:
              secureFile: $(kubeconfigControl)
          - task: AzureCLI@2
            name: Kubeform_setup
            displayName: Kubeform setup
            condition: eq('${{ parameters.runDeploy }}', true)
            inputs:
              azureSubscription: $(azureServiceConnection)
              addSpnToEnvironment: true
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                kubectl port-forward -n tinyproxy deployment/de-bastion-proxy 8888:8888 --kubeconfig=$(kubeconfig_bastion.secureFilePath) &>/dev/null &
                sleep 5

                export HTTPS_PROXY=localhost:8888
                export KUBECONFIG=$(kubeconfig_cc.secureFilePath)
                kubectl create namespace $(kubeformns) --dry-run=client -o yaml | kubectl apply -f -
                kubectl label namespace $(kubeformns) remotebackend=azure --overwrite=true --dry-run=client -o yaml| kubectl apply -f -
                kubectl create secret -n $(kubeformns) generic f4dptoken --from-literal=f4dptoken=$(TKN) --dry-run=client -o yaml | kubectl apply -f -
                kubectl create secret generic -n $(kubeformns) azure --from-literal=client_certificate_path="/etc/certs/$(kubeformns).pfx" --from-literal=client_id=$(appClientId) --from-literal=subscription_id=${{ parameters.appSubscriptionId }} --from-literal=tenant_id=$tenantId --dry-run=client -o yaml | kubectl apply -f -
                b64clicrt=$(cat /tmp/appcert.pfx|base64 -w0)
                patch="{\"data\":{\"$(kubeformns).pfx\":\"$b64clicrt\"}}"
                kubectl patch secret spncertssecret -n kubeform -p $patch
                unset HTTPS_PROXY
                unset KUBECONFIG
          - task: AzureCLI@2
            displayName: Add Function Keys
            condition: eq(${{ parameters.runDeploy }}, true )
            inputs:
              azureSubscription: $(azureServiceConnection)
              failOnStandardError: true
              scriptType: 'bash'
              scriptLocation: inlineScript
              inlineScript: |
                payload="{\"properties\":{\"name\":\"$(kubeformns)\",\"value\":\"$(TKN)\"}}"
                az rest --method put --uri "$(kAppResId)/functions/kapply/keys/$(kubeformns)/?api-version=2018-11-01" --body "$payload"
                az rest --method put --uri "$(kAppResId)/functions/kread/keys/$(kubeformns)/?api-version=2018-11-01" --body "$payload"
                az rest --method put --uri "$(kExpandResId)/functions/expand/keys/$(kubeformns)/?api-version=2018-11-01" --body "$payload"
