stages:
  - stage: Run_Onboarding
    jobs:
      - job: Onboard
        steps:
          - template: downloadcerts.yml
            parameters:
              envtype: ${{ parameters.envtype }}
          - script: |
              az login --service-principal -u $(CLI-ID) -p $(certpem.secureFilePath) --tenant $(TENANT-ID) -o none
              az extension add --name account
              az account set -s ${{ parameters.appSubscriptionId }}
              subname=$(az account show |jq -r --arg id "${{ parameters.appSubscriptionId }}" '.|select (.id == $id).name')
              subprefix=$(echo $subname | awk -F - '{print $1"-"$2"-SPN-"$4"-"$5"-"$6}')
              echo "##vso[task.setvariable variable=subPrefix]$subprefix"
              resgrp=$(echo $(projectShortCode)-$(uworkStream)-${{ parameters.placement }}-$(environ)-${{ parameters.releaseVersion}}-TF-RG)
              az group create -l "northeurope" --name $resgrp
              tfstacc="$(lprojectShortCode)$(workStream)sg2$(lenviron)000001"
              if [  $(az storage account show -n $tfstacc -g $resgrp -o json --query 'name'  2>/dev/null) ]; then
              echo
              else
              tfstacc="$(lprojectShortCode)$(workStream)sg2$(lenviron)${{ parameters.instance }}001"
              fi
              echo $tfstacc
              az storage account create -g $resgrp --name $tfstacc  --kind StorageV2 -l northeurope --sku Standard_GRS --https-only true --default-action allow

              key=$(az storage account keys list -n  $tfstacc --query '[0].value' -o tsv)
              echo "##vso[task.setvariable variable=SAKEY]$key"
              az storage container create --name application --account-name   $tfstacc --auth-mode "login"
              echo "##vso[task.setvariable variable=RG]$resgrp"
              sa=$(echo  $tfstacc)
              echo "##vso[task.setvariable variable=STA]$sa"
            name: Create_TF_Storage_Acc
            displayName: Create TF Storage Account
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            inputs:
              terraformVersion: "0.13.0"
            displayName: Install terraform
          - task: InstallSSHKey@0
            inputs:
              knownHostsEntry: "ssh.dev.azure.com"
              sshKeySecureFile: "f4dp"
          - task: a8515ec8-7254-4ffd-912c-86772e2b5962@3
            inputs:
              targetFiles: "*.conf"
              encoding: "auto"
              writeBOM: true
              actionOnMissing: "warn"
              keepToken: false
              tokenPrefix: "#{"
              tokenSuffix: "}#"
              useLegacyPattern: false
              enableTelemetry: true
          - script: |
              appCliSecret="$(subPrefix)-Contributor-secret"
              appCliCert="$(subPrefix)-Contributor-cert"
              az login --service-principal -u $(CLI-ID) -p $(certpem.secureFilePath) --tenant $(TENANT-ID) -o none
              az keyvault  secret show --vault-name $(envkv) --name $appCliCert  -o json | jq -r '.value'| base64 -d > /tmp/appcert.pfx
              az keyvault secret show --vault-name $(envkv) --name def-access-pol -o json |jq -r '.value'| base64 -d > /tmp/accesspol
              appClId=$(az keyvault secret show  --vault-name $(envkv) --name $appCliSecret -o json| jq -r '.value')
              az keyvault update --resource-group "$(projectShortCode)-$(uworkStream)-${{ parameters.placement }}-P-$(environ)-${{ parameters.releaseVersion }}-${{ parameters.instance }}-RG" --name "$(projectShortCode)-$(workStream)-${{ parameters.placement }}-$(environ)-kv${{ parameters.instance }}" --default-action allow
              echo "##vso[task.setvariable variable=appClientId]$appClId"
            name: Get_KV_Secrets
            displayName: Get KV Secrets
          - script: |
              export ARM_CLIENT_ID=$(CLI-ID)
              export ARM_CLIENT_CERTIFICATE_PATH=$(certpfx.secureFilePath)
              export ARM_SUBSCRIPTION_ID=${{ parameters.appSubscriptionId }}
              export ARM_TENANT_ID=$(TENANT-ID)
              terraform init -backend-config=env.conf
            name: Terraform_init
            displayName: Terraform init
          - script: |
              export ARM_CLIENT_ID=$(CLI-ID)
              export ARM_CLIENT_CERTIFICATE_PATH=$(certpfx.secureFilePath)
              export ARM_SUBSCRIPTION_ID=${{ parameters.appSubscriptionId }}
              export ARM_TENANT_ID=$(TENANT-ID)
              export ARM_ACCESS_KEY=$(SAKEY)
              echo ${{ parameters.tfvar }} |base64 -d > /tmp/tfvars
              terraform plan -var owner="${{ parameters.owner }}" \
                             -var cert_pfx="/tmp/appcert.pfx" \
                             -var appsptype=${{ parameters.appsptype }}  \
                             -var appClientId=$(appClientId) \
                             -var vnet_prim=${{ parameters.vnet_prim }} \
                             -var vnet_sec=${{ parameters.vnet_sec}}   \
                             -var isprod=$(isprod) \
                             -var environment=${{ parameters.environ }} \
                             -var workStream=$(uworkStream) \
                             -var projectStream=$(projectShortCode) \
                             -var releaseVersion=${{ parameters.releaseVersion }} \
                             -var region=${{ parameters.region }} \
                             -var placement=${{ parameters.placement }} \
                             -var npdsub=$(MNPD-SUB-ID) \
                             -var prdsub=$(MPRD-SUB-ID) \
                             -var-file /tmp/tfvars \
                             -var-file /tmp/accesspol \
                             -out myplan
            name: Terraform_plan
            displayName: Terraform Plan
          - script: |
              export ARM_CLIENT_ID=$(CLI-ID)
              export ARM_CLIENT_CERTIFICATE_PATH=$(certpfx.secureFilePath)
              export ARM_SUBSCRIPTION_ID=${{ parameters.appSubscriptionId }}
              export ARM_TENANT_ID=$(TENANT-ID)
              export ARM_ACCESS_KEY=$(SAKEY)
              echo ${{ parameters.tfvar }} |base64 -d > /tmp/tfvars
              terraform apply myplan
            name: Terraform_apply
            displayName: Terraform apply
            condition: eq('${{ parameters.runDeploy }}', true)
          - task: a8515ec8-7254-4ffd-912c-86772e2b5962@3
            inputs:
              targetFiles: "azure.sec"
              encoding: "auto"
              writeBOM: true
              actionOnMissing: "warn"
              keepToken: false
              tokenPrefix: "#{"
              tokenSuffix: "}#"
              useLegacyPattern: false
              enableTelemetry: true
          - script: |
              curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
              mkdir -p ~/.kube
              az keyvault secret show  --vault-name $(envkv) --name onboardconfig  -o json| jq -r '.value'|base64 -d > ~/.kube/config
              if (! az keyvault secret show  --vault-name $(envkv) --name $(lprojectShortCode)$(workStream)f4dptkn > /dev/null); then
               token=$(</dev/urandom tr -dc 'A-Za-z0-9' | head -c 45  ; echo)
               az keyvault secret set -n $(lprojectShortCode)$(workStream)f4dptkn --vault-name $(envkv) --value $token  --expires $(date -d "+1 year" +%Y-%m-%d) > /dev/null
              fi
              tkn=$(az keyvault secret show  --vault-name $(envkv) --name $(lprojectShortCode)$(workStream)f4dptkn  -o json| jq -r '.value')
              az keyvault secret set -n f4dptoken --vault-name $(appkv) --value $tkn --expires $(date -d "+1 year" +%Y-%m-%d) --subscription ${{ parameters.appSubscriptionId }} > /dev/null
              kubectl create namespace $(kubeformns) --dry-run=client -o yaml | kubectl apply -f -
              kubectl label namespace $(kubeformns) remotebackend=azure --overwrite=true --dry-run=client -o yaml| kubectl apply -f -
              kubectl create secret -n $(kubeformns) generic f4dptoken --from-literal=f4dptoken=$tkn --dry-run=client -o yaml | kubectl apply -f -
              kubectl create secret generic -n $(kubeformns) azure --from-literal=client_certificate_path="/etc/certs/$(kubeformns).pfx" --from-literal=client_id=$(appClientId) --from-literal=subscription_id=$(appSubscriptionId) --from-literal=tenant_id=$(TENANT-ID) --dry-run=client -o yaml | kubectl apply -f -
              b64clicrt=$(cat /tmp/appcert.pfx|base64 -w0)
              patch="{\"data\":{\"$(kubeformns).pfx\":\"$b64clicrt\"}}"
              kubectl patch secret spncertssecret -n kubeform -p $patch
              echo "##vso[task.setvariable variable=TKN;isOutput=true;]$tkn"
            name: Kubeform_setup
            displayName: Kubeform Setup
            condition: eq('${{ parameters.runDeploy }}', true)
      - job: Add_keys
        displayName: Add Function Keys
        dependsOn: ["Onboard"]
        condition: eq(${{ parameters.runDeploy }}, true )
        variables:
          TKN: $[ dependencies.Onboard.outputs['Kubeform_setup.TKN'] ]
        steps:
          - ${{ if eq(parameters.envtype, 'npd') }}:
              - template: updatekeys_npd.yml
                parameters:
                  keyname: $(kubeformns)
                  tkn: $(TKN)
          - ${{ if eq(parameters.envtype, 'prd') }}:
              - template: updatekeys_prd.yml
                parameters:
                  keyname: $(kubeformns)
                  tkn: $(TKN)
